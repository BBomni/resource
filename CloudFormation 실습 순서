[애플리케이션 구축] 
1. pure-base 파일을 CloudFormation에 올린다.
2. Cloud9 환경을 생성한다. (Ubuntu 22.04)
3. Cloud9 EC2 인스턴스에 management 보안 그룹을 연결한다.
4. git으로 Frontend와 Backend 소스를 가져와 기본 환경을 구축한다.

[컨테이너레지스트리 구축]
1. Frontend와 Backend의 ECR 프라이빗 레포지터리를 생성한다.
2. Cloud9이 ECR 프라이빗 레포지터리에 접근할 수 있도록 정책 및 역할을 생성한다.
3. Cloud9의 임시 자격 증명을 비활성화 한 후 위에서 생성한 ECR 접근 IAM 역할을 연결한다.
4. 보안을 위해 ECR과 연결할 VPC 인터페이스 엔드포인트와 S3과 연결할 게이트웨이 엔드포인트를 생성한다.

[컨테이너 애플리케이션 등록]
1. Dockerfile을 이용하여 이미지를 생성하고 생성한 이미지를 ECR에 업로드한다.

[데이터베이스 생성]
1. RDS에서 Aurora mysql을 생성한다. 이 때 초기 데이터베이스 이름은 pure로 설정한다.
2. 데이터베이스에 접근하여 사용자를 생성하고 pure 데이터베이스에 대한 권한을 부여한다.

[SecretManager 생성]
1. 위에서 생성한 데이터베이스와 연결할 SecretManager을 생성한다.
2. 보안을 위해 SecretManager와 연결할 VPC 인터페이스 엔드포인트를 생성한다.
3. ecsTaskExecutionRole에 SecretManager에서 값을 가져오기 위한 정책을 생성하여 연결한다.

[오케스트레이터 구축]
1. pure2.yaml 파일을 CloudFormtion에 올린다. (internal ALB / internet ALB / frontend ECS Cluster / frontend ECS Task 정의)
2. CloudWatch Log용 VPC 엔드포인트를 생성한다.
3. ECS가 ALB와 연동해 Blue/Green 배포를 실행할 수 있도록 IAM 역할을 생성한다.
4. Frontend의 클러스터에서 서비스를 생성한다.
5. Backend 작업 정의와 클러스터를 생성한 후 서비스를 생성한다. 이 때 SecretManager의 보안 암호 값을 가져와 환경변수로 설정한다.
6. Frontend의 ALB DNS로 접속하여 회원가입 및 로그인이 되는지 확인한다.